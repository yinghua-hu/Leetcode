class Solution {
    List<String> ans;
    int n;
    public List<String> generateParenthesis(int n) {
        this.n = n;
        ans = new ArrayList<>();
        dfs(0, 0, 0, new StringBuilder());
        return ans;
    }
    private void dfs(int i, int leftCount, int rightCount, StringBuilder sb) {
        if (i == 2 * n) {
            ans.add(sb.toString());
            return;
        }
        if (leftCount == rightCount) {
            sb.append('(');
            leftCount++;
            dfs(i + 1, leftCount, rightCount, sb);
            leftCount--;
            sb.deleteCharAt(sb.length() - 1);
        }
        else {
            if (leftCount < n) {
                sb.append('(');
                leftCount++;
                dfs(i + 1, leftCount, rightCount, sb);
                leftCount--;
                sb.deleteCharAt(sb.length() - 1);
            }
            if (leftCount > rightCount) {
                sb.append(')');
                rightCount++;
                dfs(i + 1, leftCount, rightCount, sb);
                rightCount--;
                sb.deleteCharAt(sb.length() - 1);
            }
        }
    }
}
