class WordDictionary {
    class TrieNode {
        TrieNode[] next;
        String item;
        TrieNode() {            
            this.item = null;
            this.next = new TrieNode[26];
        }
    }
    TrieNode root;
    /** Initialize your data structure here. */
    public WordDictionary() {
        root = new TrieNode();        
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {        
        char[] s = word.toCharArray();
        TrieNode node = root;
        for (int i = 0; i < s.length; i++) {
            if (node.next[s[i] - 'a'] == null) {
                node.next[s[i] - 'a'] = new TrieNode();
            }
            node = node.next[s[i] - 'a'];
        }
        node.item = word;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        return match(word.toCharArray(), 0, root);
    }
    
    private boolean match(char[] array, int i, TrieNode node) {
        if (i == array.length) {
            if (node.item != null) {
                return true;    
            }
            else {
                return false;
            }            
        }
        if (array[i] != '.') {
            if (node.next[array[i] - 'a'] == null) {
                return false;
            }
            else {
                return match(array, i + 1, node.next[array[i] - 'a']);    
            }            
        }
        else {
            for (int j = 0; j < 26; j++) {
                if (node.next[j] == null) {
                    continue;
                }
                if (match(array, i + 1, node.next[j])) {
                    return true;
                }
            }
        }
        return false;        
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */
