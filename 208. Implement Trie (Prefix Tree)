class TrieNode {
    private TrieNode[] links;
    private final int R = 26;
    private boolean isEnd;
    public TrieNode() {
        links = new TrieNode[R];
    }
    public boolean containsKey(char ch) {
        return links[ch - 'a'] != null;
    }
    public TrieNode get(char ch) {
        return links[ch - 'a'];
    }
    public void put(char ch, TrieNode node) {
        links[ch - 'a'] = node;
    }
    public void setEnd() {
        isEnd = true;
    }
    public boolean isEnd() {
        return isEnd;
    }
}
class Trie {
    private TrieNode root;

    /** Initialize your data structure here. */
    public Trie() {
        root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        char[] s = word.toCharArray();
        TrieNode node = root;
        for (int i = 0; i < s.length; i++) {
            if (!node.containsKey(s[i])) {
                node.put(s[i], new TrieNode());                
            }
            node = node.get(s[i]);
        }
        node.setEnd();
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        TrieNode node = find(word);
        return node != null && node.isEnd();        
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        TrieNode node = find(prefix);
        return node != null;        
    }
    
    public TrieNode find(String word) {
        char[] s = word.toCharArray();
        TrieNode node = root;
        for (int i = 0; i < s.length; i++) {
            if (!node.containsKey(s[i])) {
                return null;
            }
            node = node.get(s[i]);
        }
        return node;
    }
}
